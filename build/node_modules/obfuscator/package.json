{
  "name": "obfuscator",
  "version": "0.0.2",
  "scripts": {
    "test": "./test.sh"
  },
  "dependencies": {
    "uglify-js": "*",
    "commander": "*"
  },
  "devDependencies": {
    "vows": "*",
    "grunt": "*",
    "grunt-jslint": "*"
  },
  "bin": {
    "obfuscator": "bin/obfuscator"
  },
  "main": "lib/obfuscator",
  "preferGlobal": true,
  "readme": "# Obfuscator\n\nObfuscate your node packages because your boss says so!\n\n## Installation\n\nStandard node install via [npm]: `npm install obfuscator`\n\n## Why?\n\nBecause I had this conversation:\n\n> **me**: hi boss.  this application should be written in node, not java.  node is good and stuff.\n\n> **boss**: oh, okay.  node sounds great.  what about code protection so people don't steal our software?\n\n> **me**: ...\n\n> **boss**: you can't use node.\n\n... but now:\n\n> **me**: hi boss.  first off, code protection is stupid.  secondly, java can be decompiled.\n\n> **boss**: but decompiling java is a lot of work.\n\n> **me**: so is [un-obfuscating javascript]!\n\n## Usage\n\n### Command Line (installed globally with the `-g` flag)\n\n```\n$ obfuscator --entry app.js ./app.js ./routes/index.js ./routes/user.js\n```\n\n### Grunt\n\nTested with both 0.3.x and 0.4.x.  It should work until the [grunt] people change everything again.\n\n```javascript\nmodule.exports = function (grunt) {\n  'use strict';\n\n  grunt.loadNpmTasks('obfuscator'); // load the task\n\n  grunt.initConfig({\n    obfuscator: {\n      files: [\n        'app.js',\n        'lib/routes/*.js'\n      ],\n      entry: 'app.js',\n      out: 'obfuscated.js'\n    }\n  });\n\n  grunt.registerTask('default', 'obfuscator');\n};\n```\n\n### Raw JavaScript API\n\n```javascript\nvar Options = require('obfuscator').Options;\nvar obfuscator = require('obfuscator').obfuscator;\nvar fs = require('fs');\nvar options = new Options([ '/path/to/file1.js', '/path/to/file2.js' ], '/path/to', 'file1.js');\nobfuscator(options, function (err, obfuscated) {\n  if (err) {\n    throw err;\n  }\n  fs.writeFile('./cool.js', obfuscated, function (err) {\n    if (err) {\n      throw err;\n    }\n\n    console.log('cool.');\n  });\n});\n```\n\nAlso see [examples].\n\n## How it Works\n\nThink [browserify] only for node, plus [UglifyJs].  Your entire project will be concatenated into a single file.  This file will contain a stubbed `require` function, which will handle everything for you.  This single file will be run through [UglifyJs], making it more difficult to read.\n\nUndoing this process is hopefully as painful as decompiling java bytecode.\n\n## Known bugs and limitations\n\n- everything (including json, subdirectories, etc.) must be in the `root` of your project.\n- you're not able to use many of the native module's `require` features; only `require.cache` and `require.resolve` have been exposed.\n- you're not able to do silly things with `module.`\n- you don't have access to the global namespace\n\n## Contrubuting\n\nDo it, but add tests for your changes.  Tests should be written with [Vows].  Use JSLint whitespace rules.\n\n\n[npm]: https://github.com/isaacs/npm\n[un-obfuscating javascript]: http://github.com/stephenmathieson/node-obfuscator\n[browserify]: https://github.com/substack/node-browserify\n[UglifyJS]: https://github.com/mishoo/UglifyJS2\n[Vows]: https://github.com/cloudhead/vows\n[examples]: https://github.com/stephenmathieson/node-obfuscator/tree/master/examples\n[grunt]: https://github.com/gruntjs/grunt\n",
  "readmeFilename": "readme.md",
  "_id": "obfuscator@0.0.2",
  "description": "Obfuscate your node packages because your boss says so!",
  "dist": {
    "shasum": "38491fa7d503190ee92a842ad906ee1677efaee0"
  },
  "_from": "obfuscator@",
  "_resolved": "https://registry.npmjs.org/obfuscator/-/obfuscator-0.0.2.tgz"
}
